<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Analysis Dashboard - KLE Tech University</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/theme-toggle.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'poppins': ['Poppins', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    
    <!-- Server data -->
    <script type="application/json" id="servers-data">
        {{{ json servers }}}
    </script>
    
    <!-- Fallback data (uncomment if json helper fails) -->
    <!--
    <script type="application/json" id="servers-data">
        []
    </script>
    -->
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }

        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }

        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Footer */
        .footer {
            background: linear-gradient(135deg, #343a40 0%, #495057 100%);
            color: white;
            text-align: center;
            padding: 30px 0;
            margin-top: 60px;
        }

        .footer-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 30px;
        }

        .footer-text {
            opacity: 0.8;
            font-size: 0.9rem;
        }
        
        /* Dark Theme Styles */
        [data-theme="dark"] {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --bg-card: #334155;
            --text-primary: #f1f5f9;
            --text-secondary: #cbd5e1;
            --border-color: #475569;
        }
        
        [data-theme="dark"] body {
            background: var(--bg-primary);
            color: var(--text-primary);
        }
        
        [data-theme="dark"] .bg-white {
            background-color: var(--bg-card);
        }
        
        [data-theme="dark"] .text-gray-700 {
            color: var(--text-secondary);
        }
        
        [data-theme="dark"] .text-gray-600 {
            color: var(--text-secondary);
        }
        
        [data-theme="dark"] .text-gray-900 {
            color: var(--text-primary);
        }
        
        [data-theme="dark"] .border-gray-300 {
            border-color: var(--border-color);
        }
        
        [data-theme="dark"] .bg-gray-50 {
            background-color: var(--bg-primary);
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <div class="bg-gradient-to-r from-red-600 to-red-700 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-6 py-8">
            <div class="text-center">
                <h1 class="text-4xl font-bold mb-2">Server Analysis Dashboard</h1>
                <p class="text-xl opacity-90">Comprehensive Performance Overview</p>
                <p class="text-lg opacity-75">All Servers Performance Metrics & Analytics</p>
            </div>
        </div>
    </div>

    <!-- Navigation Controls -->
    <div class="max-w-7xl mx-auto px-6 py-6">
        <div class="flex flex-wrap items-center justify-between gap-4 bg-white rounded-xl shadow-md p-6 mb-8">
            <div class="flex items-center gap-4">
                <label for="time-range" class="font-medium text-gray-700">Time Range:</label>
                <select id="time-range" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="7">7 Days</option>
                    <option value="15" selected>15 Days</option>
                    <option value="30">30 Days</option>
                    <option value="90">90 Days</option>
                </select>
                
                <label for="refresh-interval" class="font-medium text-gray-700 ml-4">Refresh:</label>
                <select id="refresh-interval" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="30000">30s</option>
                    <option value="60000" selected>1 min</option>
                    <option value="300000">5 min</option>
                </select>
            </div>
            
            <div class="flex items-center gap-4">
                <!-- Theme Toggle -->
                {{themeToggle}}
                
                <button id="generate-all-sample" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                    <i class="fas fa-database mr-2"></i>Generate Sample Data for All
                </button>
                <button onclick="window.location.href='/dashboard'" class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-6 pb-20">
        <!-- Overall Statistics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                        <i class="fas fa-server text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Total Servers</p>
                        <p class="text-2xl font-bold text-gray-900" id="total-servers">-</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-100 text-green-600">
                        <i class="fas fa-check-circle text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Online Servers</p>
                        <p class="text-2xl font-bold text-gray-900" id="online-servers">-</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-red-100 text-red-600">
                        <i class="fas fa-times-circle text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Offline Servers</p>
                        <p class="text-2xl font-bold text-gray-900" id="offline-servers">-</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                        <i class="fas fa-chart-line text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Avg CPU Usage</p>
                        <p class="text-2xl font-bold text-gray-900" id="avg-cpu-usage">-</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Server Performance Grid -->
        <div id="server-grid" class="space-y-8">
            <!-- Loading message -->
            <div id="loading-message" class="text-center py-12">
                <div class="loading-spinner mx-auto mb-4"></div>
                <p class="text-gray-500">Loading server data...</p>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <p class="footer-text">
                Â© 2025 KLE Technological University - CAIR Lab.
            </p>
        </div>
    </footer>

    <script>
        // Global variables
        let servers = [];
        let refreshInterval;
        let timeRange = 15;

        // Parse servers data safely
        try {
            const serversData = document.querySelector('script[type="application/json"]');
            if (serversData) {
                servers = JSON.parse(serversData.textContent);
                console.log('Servers data loaded:', servers);
            } else {
                console.warn('No servers data script tag found');
            }
        } catch (error) {
            console.error('Error parsing servers data:', error);
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
            setupEventListeners();
            
            // Only load data and start refresh if we have servers
            if (servers && servers.length > 0) {
                loadAllServerData();
                startAutoRefresh();
            } else {
                loadAllServerData(); // This will show the "no servers" message
            }
        });

        function initializePage() {
            updateOverallStats();
        }

        function setupEventListeners() {
            // Time range change
            document.getElementById('time-range').addEventListener('change', function(e) {
                timeRange = parseInt(e.target.value);
                if (servers && servers.length > 0) {
                    loadAllServerData();
                }
            });

            // Refresh interval change
            document.getElementById('refresh-interval').addEventListener('change', function(e) {
                const interval = parseInt(e.target.value);
                startAutoRefresh(interval);
            });

            // Generate sample data for all servers
            document.getElementById('generate-all-sample').addEventListener('click', function() {
                generateSampleDataForAll();
            });
        }

        function updateOverallStats() {
            if (!servers || servers.length === 0) {
                document.getElementById('total-servers').textContent = '0';
                document.getElementById('online-servers').textContent = '0';
                document.getElementById('offline-servers').textContent = '0';
                return;
            }
            
            const totalServers = servers.length;
            const onlineServers = servers.filter(s => s.status === 'on').length;
            const offlineServers = totalServers - onlineServers;

            document.getElementById('total-servers').textContent = totalServers;
            document.getElementById('online-servers').textContent = onlineServers;
            document.getElementById('offline-servers').textContent = offlineServers;
        }

        function loadAllServerData() {
            const serverGrid = document.getElementById('server-grid');
            serverGrid.innerHTML = '';

            if (!servers || servers.length === 0) {
                serverGrid.innerHTML = `
                    <div class="text-center py-12">
                        <div class="text-gray-500 mb-4">
                            <i class="fas fa-server text-4xl"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-2">No Servers Found</h3>
                        <p class="text-gray-500">No servers are currently available for analysis.</p>
                        <div class="mt-4">
                            <a href="/dashboard" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors inline-flex items-center gap-2">
                                <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
                            </a>
                        </div>
                    </div>
                `;
                return;
            }

            servers.forEach(server => {
                const serverCard = createServerCard(server);
                serverGrid.appendChild(serverCard);
                loadServerPerformanceData(server._id, serverCard);
            });
        }

        function createServerCard(server) {
            const card = document.createElement('div');
            card.className = 'bg-white rounded-xl shadow-md p-6';
            card.innerHTML = `
                <div class="mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">${server.model || 'Unknown Server'}</h3>
                            <p class="text-gray-600">IP: ${server.serverIp || 'Unknown IP'}</p>
                            <p class="text-sm text-gray-500">Server ID: ${server._id}</p>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="px-3 py-1 rounded-full text-sm font-medium ${
                                server.status === 'on' 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-red-100 text-red-800'
                            }">
                                ${server.status === 'on' ? 'Online' : 'Offline'}
                            </span>
                            <button onclick="window.location.href='/analyze/${server._id}'" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                <i class="fas fa-chart-bar mr-2"></i>Detailed View
                            </button>
                        </div>
                    </div>
                    
                    <!-- Performance Summary Cards -->
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                        <div class="bg-gray-50 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-600" id="uptime-${server._id}">-</div>
                            <div class="text-sm text-gray-600">Uptime (hrs)</div>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-600" id="cpu-${server._id}">-</div>
                            <div class="text-sm text-gray-600">CPU (%)</div>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-600" id="memory-${server._id}">-</div>
                            <div class="text-sm text-gray-600">Memory (%)</div>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-orange-600" id="disk-${server._id}">-</div>
                            <div class="text-sm text-gray-600">Disk (%)</div>
                        </div>
                    </div>
                </div>

                <!-- Charts Row -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                        <h4 class="text-lg font-semibold text-gray-700 mb-3">CPU & Memory Trends</h4>
                        <div class="chart-container">
                            <canvas id="trend-chart-${server._id}"></canvas>
                        </div>
                    </div>
                    <div>
                        <h4 class="text-lg font-semibold text-gray-700 mb-3">Resource Usage</h4>
                        <div class="chart-container">
                            <canvas id="resource-chart-${server._id}"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="loading-${server._id}" class="text-center py-8">
                    <div class="loading-spinner mx-auto mb-4"></div>
                    <p class="text-gray-500">Loading performance data...</p>
                </div>

                <!-- Error State -->
                <div id="error-${server._id}" class="hidden text-center py-8">
                    <div class="text-red-500 mb-2">
                        <i class="fas fa-exclamation-triangle text-2xl"></i>
                    </div>
                    <p class="text-red-600">Failed to load performance data</p>
                    <button onclick="loadServerPerformanceData('${server._id}', this.closest('.bg-white'))" 
                            class="mt-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                        Retry
                    </button>
                </div>
            `;
            return card;
        }

        async function loadServerPerformanceData(serverId, serverCard) {
            try {
                const response = await fetch(`/api/performance/${serverId}?days=${timeRange}`);
                const result = await response.json();

                if (result.success) {
                    updateServerMetrics(serverId, result.data);
                    createServerCharts(serverId, result.data);
                    hideLoadingState(serverId);
                } else {
                    showErrorState(serverId);
                }
            } catch (error) {
                console.error(`Error loading data for server ${serverId}:`, error);
                showErrorState(serverId);
            }
        }

        function updateServerMetrics(serverId, data) {
            // Update summary cards
            document.getElementById(`uptime-${serverId}`).textContent = data.uptime.toFixed(1);
            document.getElementById(`cpu-${serverId}`).textContent = data.cpuUtilization.last15Days.toFixed(1);
            document.getElementById(`memory-${serverId}`).textContent = data.memoryUsage.toFixed(1);
            document.getElementById(`disk-${serverId}`).textContent = data.diskUsage.toFixed(1);

            // Update overall average CPU
            updateOverallAvgCPU();
        }

        function createServerCharts(serverId, data) {
            // CPU & Memory Trends Chart
            const trendCtx = document.getElementById(`trend-chart-${serverId}`).getContext('2d');
            new Chart(trendCtx, {
                type: 'line',
                data: {
                    labels: ['7 Days', '15 Days'],
                    datasets: [
                        {
                            label: 'CPU Utilization (%)',
                            data: [data.cpuUtilization.last7Days, data.cpuUtilization.last15Days],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4
                        },
                        {
                            label: 'Memory Usage (%)',
                            data: [data.memoryUsage, data.memoryUsage],
                            borderColor: '#8b5cf6',
                            backgroundColor: 'rgba(139, 92, 246, 0.1)',
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });

            // Resource Usage Chart
            const resourceCtx = document.getElementById(`resource-chart-${serverId}`).getContext('2d');
            new Chart(resourceCtx, {
                type: 'doughnut',
                data: {
                    labels: ['CPU', 'Memory', 'Disk'],
                    datasets: [{
                        data: [
                            data.cpuUtilization.last15Days,
                            data.memoryUsage,
                            data.diskUsage
                        ],
                        backgroundColor: [
                            '#3b82f6',
                            '#8b5cf6',
                            '#f59e0b'
                        ],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }

        function hideLoadingState(serverId) {
            document.getElementById(`loading-${serverId}`).classList.add('hidden');
        }

        function showErrorState(serverId) {
            document.getElementById(`loading-${serverId}`).classList.add('hidden');
            document.getElementById(`error-${serverId}`).classList.remove('hidden');
        }

        function updateOverallAvgCPU() {
            if (!servers || servers.length === 0) {
                document.getElementById('avg-cpu-usage').textContent = '-';
                return;
            }

            // Calculate average CPU across all servers
            const cpuElements = document.querySelectorAll('[id^="cpu-"]');
            let totalCPU = 0;
            let validCount = 0;

            cpuElements.forEach(element => {
                const value = parseFloat(element.textContent);
                if (!isNaN(value)) {
                    totalCPU += value;
                    validCount++;
                }
            });

            if (validCount > 0) {
                const avgCPU = (totalCPU / validCount).toFixed(1);
                document.getElementById('avg-cpu-usage').textContent = avgCPU + '%';
            }
        }

        async function generateSampleDataForAll() {
            if (!servers || servers.length === 0) {
                alert('No servers available to generate sample data for.');
                return;
            }

            const button = document.getElementById('generate-all-sample');
            const originalText = button.innerHTML;
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Generating...';

            try {
                for (const server of servers) {
                    await fetch(`/api/performance/sample/${server._id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
                
                // Reload all data
                loadAllServerData();
                
                button.innerHTML = '<i class="fas fa-check mr-2"></i>Generated Successfully';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 2000);
            } catch (error) {
                console.error('Error generating sample data:', error);
                button.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Error';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 2000);
            }
        }

        function startAutoRefresh(interval = 60000) {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
            
            // Only start refresh if we have servers
            if (servers && servers.length > 0) {
                refreshInterval = setInterval(() => {
                    loadAllServerData();
                }, interval);
            }
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>
    <script src="/js/theme-toggle.js"></script>
</body>
</html>
