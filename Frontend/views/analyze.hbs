<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Performance Analysis - {{serverName}}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/theme-toggle.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'poppins': ['Poppins', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }

        /* Footer */
        .footer {
            background: linear-gradient(135deg, #343a40 0%, #495057 100%);
            color: white;
            text-align: center;
            padding: 30px 0;
            margin-top: 60px;
        }

        .footer-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 30px;
        }

        .footer-text {
            opacity: 0.8;
            font-size: 0.9rem;
        }
        
        /* CSS Variables for theme colors */
        :root {
            --bg-primary: #f8f9fa;
            --bg-secondary: #ffffff;
            --bg-card: #ffffff;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --accent-blue: #3b82f6;
            --accent-green: #10b981;
            --accent-yellow: #f59e0b;
            --accent-purple: #8b5cf6;
            --accent-red: #ef4444;
        }

        /* Dark Theme Styles */
        [data-theme="dark"] {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --bg-card: #334155;
            --text-primary: #f1f5f9;
            --text-secondary: #cbd5e1;
            --border-color: #475569;
            --shadow-color: rgba(0, 0, 0, 0.3);
            --accent-blue: #60a5fa;
            --accent-green: #34d399;
            --accent-yellow: #fbbf24;
            --accent-purple: #a78bfa;
            --accent-red: #f87171;
        }

        /* System theme styles - follows system preference */
        [data-theme="system"] {
            --bg-primary: #f8f9fa;
            --bg-secondary: #ffffff;
            --bg-card: #ffffff;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --accent-blue: #3b82f6;
            --accent-green: #10b981;
            --accent-yellow: #f59e0b;
            --accent-purple: #8b5cf6;
            --accent-red: #ef4444;
        }

        @media (prefers-color-scheme: dark) {
            [data-theme="system"] {
                --bg-primary: #0f172a;
                --bg-secondary: #1e293b;
                --bg-card: #334155;
                --text-primary: #f1f5f9;
                --text-secondary: #cbd5e1;
                --border-color: #475569;
                --shadow-color: rgba(0, 0, 0, 0.3);
                --accent-blue: #60a5fa;
                --accent-green: #34d399;
                --accent-yellow: #fbbf24;
                --accent-purple: #a78bfa;
                --accent-red: #f87171;
            }
        }

        /* Dark theme overrides for all elements */
        [data-theme="dark"] body,
        [data-theme="dark"] .bg-gray-50 {
            background: var(--bg-primary) !important;
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] .bg-white {
            background: var(--bg-card) !important;
            border-color: var(--border-color) !important;
        }

        [data-theme="dark"] .text-gray-700,
        [data-theme="dark"] .text-gray-600,
        [data-theme="dark"] .text-gray-800,
        [data-theme="dark"] .text-gray-900 {
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] .text-gray-600 {
            color: var(--text-secondary) !important;
        }

        [data-theme="dark"] .border-gray-300 {
            border-color: var(--border-color) !important;
        }

        [data-theme="dark"] .bg-blue-100 {
            background-color: rgba(96, 165, 250, 0.1) !important;
        }

        [data-theme="dark"] .bg-green-100 {
            background-color: rgba(52, 211, 153, 0.1) !important;
        }

        [data-theme="dark"] .bg-yellow-100 {
            background-color: rgba(251, 191, 36, 0.1) !important;
        }

        [data-theme="dark"] .bg-purple-100 {
            background-color: rgba(167, 139, 250, 0.1) !important;
        }

        [data-theme="dark"] .text-blue-600 {
            color: var(--accent-blue) !important;
        }

        [data-theme="dark"] .text-green-600 {
            color: var(--accent-green) !important;
        }

        [data-theme="dark"] .text-yellow-600 {
            color: var(--accent-yellow) !important;
        }

        [data-theme="dark"] .text-purple-600 {
            color: var(--accent-purple) !important;
        }

        [data-theme="dark"] .bg-red-50 {
            background-color: rgba(239, 68, 68, 0.1) !important;
        }

        [data-theme="dark"] .border-red-200 {
            border-color: rgba(239, 68, 68, 0.3) !important;
        }

        [data-theme="dark"] .text-red-500 {
            color: var(--accent-red) !important;
        }

        [data-theme="dark"] .text-red-800 {
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] .text-red-600 {
            color: var(--text-secondary) !important;
        }

        /* Enhanced card styling for dark theme */
        [data-theme="dark"] .bg-white {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-card) 100%) !important;
            box-shadow: 0 10px 30px var(--shadow-color) !important;
            border: 1px solid var(--border-color) !important;
        }

        /* Enhanced button styling for dark theme */
        [data-theme="dark"] .bg-blue-600 {
            background: linear-gradient(135deg, var(--accent-blue), #1d4ed8) !important;
        }

        [data-theme="dark"] .bg-gray-600 {
            background: linear-gradient(135deg, #4b5563, #374151) !important;
        }

        [data-theme="dark"] .bg-red-600 {
            background: linear-gradient(135deg, var(--accent-red), #dc2626) !important;
        }

        /* Enhanced header styling for dark theme */
        [data-theme="dark"] .bg-gradient-to-r.from-red-600.to-red-700 {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%) !important;
        }

        /* Enhanced select and input styling for dark theme */
        [data-theme="dark"] select,
        [data-theme="dark"] input {
            background-color: var(--bg-secondary) !important;
            border-color: var(--border-color) !important;
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] select:focus,
        [data-theme="dark"] input:focus {
            border-color: var(--accent-blue) !important;
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1) !important;
        }

        /* Enhanced shadow and border styling */
        [data-theme="dark"] .shadow-md {
            box-shadow: 0 10px 30px var(--shadow-color) !important;
        }

        [data-theme="dark"] .shadow-lg {
            box-shadow: 0 20px 40px var(--shadow-color) !important;
        }

        /* Enhanced loading and error states */
        [data-theme="dark"] #loading {
            color: var(--text-secondary) !important;
        }

        [data-theme="dark"] #error {
            background-color: rgba(239, 68, 68, 0.1) !important;
            border-color: rgba(239, 68, 68, 0.3) !important;
        }

        /* Enhanced chart container styling */
        [data-theme="dark"] canvas {
            background-color: transparent !important;
        }

        /* Enhanced navigation controls */
        [data-theme="dark"] .bg-white.rounded-xl.shadow-md {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-card) 100%) !important;
            border: 1px solid var(--border-color) !important;
        }

        /* Enhanced icon backgrounds with better contrast */
        [data-theme="dark"] .w-12.h-12.bg-blue-100 {
            background: linear-gradient(135deg, rgba(96, 165, 250, 0.2), rgba(96, 165, 250, 0.1)) !important;
        }

        [data-theme="dark"] .w-12.h-12.bg-green-100 {
            background: linear-gradient(135deg, rgba(52, 211, 153, 0.2), rgba(52, 211, 153, 0.1)) !important;
        }

        [data-theme="dark"] .w-12.h-12.bg-yellow-100 {
            background: linear-gradient(135deg, rgba(251, 191, 36, 0.2), rgba(251, 191, 36, 0.1)) !important;
        }

        [data-theme="dark"] .w-12.h-12.bg-purple-100 {
            background: linear-gradient(135deg, rgba(167, 139, 250, 0.2), rgba(167, 139, 250, 0.1)) !important;
        }

        /* Enhanced hover effects for dark theme */
        [data-theme="dark"] .bg-white:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 15px 35px var(--shadow-color) !important;
        }

        /* Enhanced button hover effects */
        [data-theme="dark"] .bg-blue-600:hover {
            background: linear-gradient(135deg, #1d4ed8, var(--accent-blue)) !important;
            transform: translateY(-1px) !important;
        }

        [data-theme="dark"] .bg-gray-600:hover {
            background: linear-gradient(135deg, #374151, #4b5563) !important;
            transform: translateY(-1px) !important;
        }

        [data-theme="dark"] .bg-red-600:hover {
            background: linear-gradient(135deg, #991b1b, var(--accent-red)) !important;
            transform: translateY(-1px) !important;
        }

        /* Enhanced transitions */
        [data-theme="dark"] * {
            transition: all 0.3s ease !important;
        }

        /* Chart dark theme styling */
        [data-theme="dark"] canvas {
            filter: brightness(0.9) contrast(1.1);
        }

        /* Main content container dark theme styling */
        [data-theme="dark"] .max-w-7xl.mx-auto.px-6.pb-20 {
            background: var(--bg-primary);
            color: var(--text-primary);
        }

        /* Enhanced main content area styling */
        [data-theme="dark"] .max-w-7xl {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%) !important;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <div class="bg-gradient-to-r from-red-600 to-red-700 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-6 py-8">
            <div class="text-center">
                <h1 class="text-4xl font-bold mb-2">Performance Analysis</h1>
                <p class="text-xl opacity-90">{{serverName}}</p>
                <p class="text-lg opacity-75">IP: {{serverIp}} | Server ID: {{serverId}}</p>
            </div>
        </div>
    </div>

    <!-- Navigation Controls -->
    <div class="max-w-7xl mx-auto px-6 py-6">
        <div class="flex flex-wrap items-center justify-between gap-4 bg-white rounded-xl shadow-md p-6 mb-8">
            <div class="flex items-center gap-4">
                <label for="time-range" class="font-medium text-gray-700">Time Range:</label>
                <select id="time-range" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="7">7 Days</option>
                    <option value="15" selected>15 Days</option>
                    <option value="30">30 Days</option>
                    <option value="90">90 Days</option>
                </select>
                
                <label for="refresh-interval" class="font-medium text-gray-700 ml-4">Refresh:</label>
                <select id="refresh-interval" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="30000">30s</option>
                    <option value="60000" selected>1 min</option>
                    <option value="300000">5 min</option>
                </select>
            </div>
            
            <div class="flex items-center gap-4">
                <!-- Theme Toggle -->
                {{themeToggle}}
                
                <button id="generate-sample" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                    <i class="fas fa-database mr-2"></i>Generate Sample Data
                </button>
                <button onclick="window.location.href='/dashboard'" class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
                </button>
            </div>
        </div>


    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-6 pb-20">
        <!-- Prometheus Status Card -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Server Status</h2>
            <div id="prometheus-status" class="flex items-center gap-4">
                <div class="w-4 h-4 rounded-full bg-gray-300 animate-pulse"></div>
                <span class="text-gray-600">Checking server status...</span>
            </div>
        </div>

        <!-- Performance Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Uptime</p>
                        <p id="uptime-value" class="text-2xl font-bold text-gray-900">--</p>
                    </div>
                    <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-clock text-blue-600 text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">CPU Usage</p>
                        <p id="cpu-value" class="text-2xl font-bold text-gray-900">--</p>
                    </div>
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-microchip text-green-600 text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Memory Usage</p>
                        <p id="memory-value" class="text-2xl font-bold text-gray-900">--</p>
                    </div>
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-memory text-yellow-600 text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Disk Usage</p>
                        <p id="disk-value" class="text-2xl font-bold text-gray-900">--</p>
                    </div>
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-hdd text-purple-600 text-xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Charts -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">CPU Utilization Trend</h3>
                <div class="h-64">
                    <canvas id="cpuChart"></canvas>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Memory Usage Trend</h3>
                <div class="h-64">
                    <canvas id="memoryChart"></canvas>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Disk Usage Trend</h3>
                <div class="h-64">
                    <canvas id="diskChart"></canvas>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-md p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Network Traffic</h3>
                <div class="h-64">
                    <canvas id="networkChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Loading and Error States -->
        <div id="loading" class="text-center py-12">
            <div class="inline-flex items-center gap-3 text-gray-600">
                <i class="fas fa-spinner fa-spin text-2xl"></i>
                <span class="text-lg">Loading performance data...</span>
            </div>
        </div>
        
        <div id="error" class="hidden text-center py-12">
            <div class="bg-red-50 border border-red-200 rounded-xl p-6 max-w-md mx-auto">
                <i class="fas fa-exclamation-triangle text-red-500 text-3xl mb-4"></i>
                <h3 class="text-lg font-semibold text-red-800 mb-2">Unable to load data</h3>
                <p id="error-message" class="text-red-600 mb-4">Please try again later or generate sample data.</p>
                <button id="retry-btn" class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                    Retry
                </button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <p class="footer-text">
                © 2025 KLE Technological University - CAIR Lab. 
            </p>
        </div>
    </footer>

    <script>
        // Global variables
        let currentServerIndex = 0;
        let allServers = [];
        let refreshInterval;
        let charts = {};

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
        });

        // Initialize page functionality
        async function initializePage() {
            try {
                // Load all servers for navigation
                await loadAllServers();
                
                        // Set up event listeners
        setupEventListeners();
        
        // Initialize charts
        initializeCharts();
        
        // Set up theme listener
        setupThemeListener();
                
                // Load initial data
                await loadData();
                
                // Start refresh interval
                startRefreshInterval();
                
                // Check Prometheus status
                checkPrometheusStatus();
                
            } catch (error) {
                console.error('Failed to initialize page:', error);
                showError('Failed to initialize page. Please refresh and try again.');
            }
        }

        // Load all servers for navigation
        async function loadAllServers() {
            try {
                const response = await fetch('/api/servers');
                if (!response.ok) throw new Error('Failed to fetch servers');
                
                const data = await response.json();
                allServers = Array.isArray(data) ? data : (data.servers || []);
                
                // Find current server index
                currentServerIndex = allServers.findIndex(server => server._id === '{{serverId}}');
                if (currentServerIndex === -1) currentServerIndex = 0;
                
            } catch (error) {
                console.error('Failed to load servers:', error);
                allServers = [];
            }
        }

        // Set up event listeners
        function setupEventListeners() {
            // Time range change
            document.getElementById('time-range').addEventListener('change', function() {
                loadData();
            });

            // Refresh interval change
            document.getElementById('refresh-interval').addEventListener('change', function() {
                startRefreshInterval();
            });

            // Generate sample data
            document.getElementById('generate-sample').addEventListener('click', generateSample);

            // Retry button
            document.getElementById('retry-btn').addEventListener('click', loadData);


        }

        // Initialize Chart.js charts
        function initializeCharts() {
            const isDarkTheme = document.documentElement.getAttribute('data-theme') === 'dark';
            
            const chartOptions = getChartOptions(isDarkTheme);

            // CPU Chart
            const cpuCtx = document.getElementById('cpuChart').getContext('2d');
            charts.cpu = new Chart(cpuCtx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'CPU Usage %',
                        data: [],
                        borderColor: isDarkTheme ? '#60a5fa' : 'rgb(59, 130, 246)',
                        backgroundColor: isDarkTheme ? 'rgba(96, 165, 250, 0.1)' : 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: chartOptions
            });

            // Memory Chart
            const memoryCtx = document.getElementById('memoryChart').getContext('2d');
            charts.memory = new Chart(memoryCtx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Memory Usage %',
                        data: [],
                        borderColor: isDarkTheme ? '#34d399' : 'rgb(34, 197, 94)',
                        backgroundColor: isDarkTheme ? 'rgba(52, 211, 153, 0.1)' : 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: chartOptions
            });

            // Disk Chart
            const diskCtx = document.getElementById('diskChart').getContext('2d');
            charts.disk = new Chart(diskCtx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Disk Usage %',
                        data: [],
                        borderColor: isDarkTheme ? '#a78bfa' : 'rgb(168, 85, 247)',
                        backgroundColor: isDarkTheme ? 'rgba(167, 139, 250, 0.1)' : 'rgba(168, 85, 247, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: chartOptions
            });

            // Network Chart
            const networkCtx = document.getElementById('networkChart').getContext('2d');
            charts.network = new Chart(networkCtx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Network In (MB)',
                        data: [],
                        borderColor: isDarkTheme ? '#fbbf24' : 'rgb(245, 158, 11)',
                        backgroundColor: isDarkTheme ? 'rgba(251, 191, 36, 0.1)' : 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: 'Network Out (MB)',
                        data: [],
                        borderColor: isDarkTheme ? '#f87171' : 'rgb(239, 68, 68)',
                        backgroundColor: isDarkTheme ? 'rgba(248, 113, 113, 0.1)' : 'rgba(239, 68, 68, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    ...chartOptions,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: isDarkTheme ? '#f1f5f9' : '#1f2937'
                            }
                        }
                    }
                }
            });
        }

        // Get chart options based on theme
        function getChartOptions(isDarkTheme) {
            return {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        labels: {
                            color: isDarkTheme ? '#f1f5f9' : '#1f2937'
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day'
                        },
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: isDarkTheme ? '#cbd5e1' : '#6b7280'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: isDarkTheme ? 'rgba(203, 213, 225, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                        },
                        ticks: {
                            color: isDarkTheme ? '#cbd5e1' : '#6b7280'
                        }
                    }
                }
            };

        // Update chart colors when theme changes
        function updateChartColors() {
            const isDarkTheme = document.documentElement.getAttribute('data-theme') === 'dark';
            
            // Update CPU chart colors
            if (charts.cpu) {
                charts.cpu.data.datasets[0].borderColor = isDarkTheme ? '#60a5fa' : 'rgb(59, 130, 246)';
                charts.cpu.data.datasets[0].backgroundColor = isDarkTheme ? 'rgba(96, 165, 250, 0.1)' : 'rgba(59, 130, 246, 0.1)';
                charts.cpu.options = getChartOptions(isDarkTheme);
                charts.cpu.update();
            }

            // Update Memory chart colors
            if (charts.memory) {
                charts.memory.data.datasets[0].borderColor = isDarkTheme ? '#34d399' : 'rgb(34, 197, 94)';
                charts.memory.data.datasets[0].backgroundColor = isDarkTheme ? 'rgba(52, 211, 153, 0.1)' : 'rgba(34, 197, 94, 0.1)';
                charts.memory.options = getChartOptions(isDarkTheme);
                charts.memory.update();
            }

            // Update Disk chart colors
            if (charts.disk) {
                charts.disk.data.datasets[0].borderColor = isDarkTheme ? '#a78bfa' : 'rgb(168, 85, 247)';
                charts.disk.data.datasets[0].backgroundColor = isDarkTheme ? 'rgba(167, 139, 250, 0.1)' : 'rgba(168, 85, 247, 0.1)';
                charts.disk.options = getChartOptions(isDarkTheme);
                charts.disk.update();
            }

            // Update Network chart colors
            if (charts.network) {
                charts.network.data.datasets[0].borderColor = isDarkTheme ? '#fbbf24' : 'rgb(245, 158, 11)';
                charts.network.data.datasets[0].backgroundColor = isDarkTheme ? 'rgba(251, 191, 36, 0.1)' : 'rgba(245, 158, 11, 0.1)';
                charts.network.data.datasets[1].borderColor = isDarkTheme ? '#f87171' : 'rgb(239, 68, 68)';
                charts.network.data.datasets[1].backgroundColor = isDarkTheme ? 'rgba(248, 113, 113, 0.1)' : 'rgba(239, 68, 68, 0.1)';
                
                const networkOptions = {
                    ...getChartOptions(isDarkTheme),
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: isDarkTheme ? '#f1f5f9' : '#1f2937'
                            }
                        }
                    }
                };
                charts.network.options = networkOptions;
                charts.network.update();
            }
        }

        // Listen for theme changes
        function setupThemeListener() {
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                        updateChartColors();
                    }
                });
            });

            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['data-theme']
            });
        }

        // Load performance data
        async function loadData() {
            try {
                showLoading(true);
                hideError();

                const timeRange = document.getElementById('time-range').value;
                const currentServer = allServers[currentServerIndex];
                
                if (!currentServer) {
                    throw new Error('No server data available');
                }

                // Load performance data from our API
                const response = await fetch(`/api/performance/${currentServer._id}?days=${timeRange}`);
                if (!response.ok) throw new Error('Failed to fetch performance data');
                
                const data = await response.json();
                
                if (data.success) {
                    displayData(data.data);
                } else {
                    throw new Error(data.message || 'Failed to load data');
                }

            } catch (error) {
                console.error('Error loading data:', error);
                showError(error.message);
            } finally {
                showLoading(false);
            }
        }

        // Display performance data
        function displayData(data) {
            if (!data || !data.summary) return;

            const summary = data.summary;
            
            // Update summary cards
            document.getElementById('uptime-value').textContent = formatUptime(summary.uptime);
            document.getElementById('cpu-value').textContent = `${summary.cpuUtilization.toFixed(1)}%`;
            document.getElementById('memory-value').textContent = `${summary.memoryUsage.toFixed(1)}%`;
            document.getElementById('disk-value').textContent = `${summary.diskUsage.toFixed(1)}%`;

            // Update charts
            updateCharts(data);
        }

        // Update charts with new data
        function updateCharts(data) {
            if (!data.trends) return;

            const trends = data.trends;
            
            // Update CPU chart
            if (charts.cpu && trends.cpu) {
                charts.cpu.data.datasets[0].data = trends.cpu.map(point => ({
                    x: new Date(point.timestamp),
                    y: point.value
                }));
                charts.cpu.update();
            }

            // Update Memory chart
            if (charts.memory && trends.memory) {
                charts.memory.data.datasets[0].data = trends.memory.map(point => ({
                    x: new Date(point.timestamp),
                    y: point.value
                }));
                charts.memory.update();
            }

            // Update Disk chart
            if (charts.disk && trends.disk) {
                charts.disk.data.datasets[0].data = trends.disk.map(point => ({
                    x: new Date(point.timestamp),
                    y: point.value
                }));
                charts.disk.update();
            }

            // Update Network chart
            if (charts.network && trends.network) {
                if (trends.network.in) {
                    charts.network.data.datasets[0].data = trends.network.in.map(point => ({
                        x: new Date(point.timestamp),
                        y: point.value / (1024 * 1024) // Convert to MB
                    }));
                }
                if (trends.network.out) {
                    charts.network.data.datasets[1].data = trends.network.out.map(point => ({
                        x: new Date(point.timestamp),
                        y: point.value / (1024 * 1024) // Convert to MB
                    }));
                }
                charts.network.update();
            }
        }

        // Check Prometheus status
        async function checkPrometheusStatus() {
            const statusElement = document.getElementById('prometheus-status');
            const currentServer = allServers[currentServerIndex];
            
            if (!currentServer) {
                statusElement.innerHTML = `
                    <div class="w-4 h-4 rounded-full bg-gray-400"></div>
                    <span class="text-gray-600">No server data available</span>
                `;
                return;
            }

            try {
                // Query Prometheus API directly
                const prometheusUrl = `/api/v1/query?query=up{instance="${currentServer.serverIp}:9182"}`;
                const response = await fetch(prometheusUrl);
                
                if (response.ok) {
                    const data = await response.json();
                    const isUp = data.data && data.data.result && data.data.result.length > 0 && data.data.result[0].value[1] === '1';
                    
                    statusElement.innerHTML = `
                        <div class="w-4 h-4 rounded-full ${isUp ? 'bg-green-500' : 'bg-red-500'}"></div>
                        <span class="font-medium ${isUp ? 'text-green-700' : 'text-red-700'}">
                            ${isUp ? 'Server is UP' : 'Server is DOWN'}
                        </span>
                    `;
                } else {
                    throw new Error('Prometheus API not accessible');
                }
            } catch (error) {
                console.error('Prometheus check failed:', error);
                statusElement.innerHTML = `
                    <div class="w-4 h-4 rounded-full bg-yellow-500"></div>
                    <span class="text-yellow-700">Status unknown (Prometheus unavailable)</span>
                `;
            }
        }

        // Generate sample data
        async function generateSample() {
            try {
                const currentServer = allServers[currentServerIndex];
                if (!currentServer) {
                    alert('No server data available');
                    return;
                }

                const response = await fetch(`/api/performance/sample/${currentServer._id}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('Sample data generated successfully!');
                        await loadData();
                    } else {
                        alert('Failed to generate sample data: ' + result.message);
                    }
                } else {
                    throw new Error('Failed to generate sample data');
                }
            } catch (error) {
                console.error('Error generating sample data:', error);
                alert('Failed to generate sample data. Please try again.');
            }
        }



        // Start refresh interval
        function startRefreshInterval() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
            
            const interval = parseInt(document.getElementById('refresh-interval').value);
            refreshInterval = setInterval(() => {
                loadData();
                checkPrometheusStatus();
            }, interval);
        }

        // Utility functions
        function formatUptime(seconds) {
            if (!seconds) return '--';
            
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            
            if (days > 0) return `${days}d ${hours}h`;
            if (hours > 0) return `${hours}h ${minutes}m`;
            return `${minutes}m`;
        }

        function showLoading(show) {
            const loading = document.getElementById('loading');
            loading.style.display = show ? 'block' : 'none';
        }

        function showError(message) {
            const error = document.getElementById('error');
            const errorMessage = document.getElementById('error-message');
            errorMessage.textContent = message;
            error.classList.remove('hidden');
        }

        function hideError() {
            const error = document.getElementById('error');
            error.classList.add('hidden');
        }
    </script>
    <script src="/js/theme-toggle.js"></script>
</body>
</html>
